//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mahmoud/projects/AraCCompilerAntlrVariant/AntlrExamples/arac.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrExamples.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class aracParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Literal=1, LP=2, RP=3, LSB=4, RSB=5, LCB=6, RCB=7, ADDRESS_OF_OPERATOR=8, 
		VALUE_INSIDE_OPERATOR=9, SIZE_OF=10, FASLA=11, FASLA_MANQUOTA=12, COLON=13, 
		PLUS=14, MINUS=15, MULTIPLY=16, DIVIDE=17, ARABIC_MODULS=18, MODULUS=19, 
		LAND=20, LOR=21, LOGICAL_NOT=22, SL_SYM=23, SRA_SYM=24, SR_SYM=25, BAND_SYM=26, 
		BOR_SYM=27, BXOR_SYM=28, BNOT_SYM=29, LTE_SYM=30, GTE_SYM=31, LT_SYM=32, 
		GT_SYM=33, EQUAL_SYM=34, NOTEQ_SYM=35, ASSIGN_SYM=36, FUNC_KEYWORD=37, 
		OP_KEYWORD=38, RET_KEYWORD=39, RES_KEYWORD=40, IF_KEYWORD=41, WHILE_KEYWORD=42, 
		BREAK_KEYWORD=43, CONTINUE_KEYWORRD=44, INT_DATA_TYPE=45, UINT_DATA_TYPE=46, 
		BYTE_DATA_TYPE=47, UBYTE_DATA_TYPE=48, SHORT_DATA_TYPE=49, USHORT_DATA_TYPE=50, 
		LONG_DATA_TYPE=51, ULONG_DATA_TYPE=52, WHITE_SPACE=53, ARABIC_INT_LITERAL=54, 
		ID=55;
	public const int
		RULE_program = 0, RULE_globalVarDecl = 1, RULE_inititalization = 2, RULE_functionDecl = 3, 
		RULE_operationDecl = 4, RULE_parameter = 5, RULE_paramList = 6, RULE_argument = 7, 
		RULE_argumentList = 8, RULE_expression = 9, RULE_comparison_op = 10, RULE_unaryBL_op = 11, 
		RULE_equality_op = 12, RULE_statement = 13, RULE_statementList = 14, RULE_expressionStat = 15, 
		RULE_operationStat = 16, RULE_assignmentStat = 17, RULE_ifStat = 18, RULE_whileStat = 19, 
		RULE_returnStat = 20, RULE_resultStat = 21, RULE_varDecl = 22, RULE_dataType = 23;
	public static readonly string[] ruleNames = {
		"program", "globalVarDecl", "inititalization", "functionDecl", "operationDecl", 
		"parameter", "paramList", "argument", "argumentList", "expression", "comparison_op", 
		"unaryBL_op", "equality_op", "statement", "statementList", "expressionStat", 
		"operationStat", "assignmentStat", "ifStat", "whileStat", "returnStat", 
		"resultStat", "varDecl", "dataType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "'&:'", "'*:'", 
		"'\u062D\u062C\u0645:'", "'\u060C'", "'\u061B'", "':'", "'+'", "'-'", 
		"'\u00D7'", "'\u00F7'", "'\u066A'", "'%'", "'&&'", "'||'", "'!'", "'<<'", 
		"'>>>'", "'>>'", "'&'", "'|'", "'^'", "'~'", "'<='", "'>='", "'<'", "'>'", 
		"'=='", "'!='", "':='", "'\u062F\u0627\u0644\u0629'", "'\u0639\u0645\u0644\u064A\u0629'", 
		"'\u0631\u062C\u0648\u0639'", "'\u0627\u0644\u0646\u0627\u062A\u062C'", 
		null, "'\u0637\u0627\u0644\u0645\u0627'", "'\u0642\u0637\u0639'", null, 
		"'\u0635\u062D\u064A\u062D'", "'\u0637\u0628\u064A\u0639\u064A'", "'\u0635\u062D\u064A\u062D_\u0661'", 
		"'\u0637\u0628\u064A\u0639\u064A_\u0661'", "'\u0635\u062D\u064A\u062D_\u0662'", 
		"'\u0637\u0628\u064A\u0639\u064A_\u0662'", "'\u0635\u062D\u064A\u062D_\u0668'", 
		"'\u0637\u0628\u064A\u0639\u064A_\u0668'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Literal", "LP", "RP", "LSB", "RSB", "LCB", "RCB", "ADDRESS_OF_OPERATOR", 
		"VALUE_INSIDE_OPERATOR", "SIZE_OF", "FASLA", "FASLA_MANQUOTA", "COLON", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "ARABIC_MODULS", "MODULUS", "LAND", 
		"LOR", "LOGICAL_NOT", "SL_SYM", "SRA_SYM", "SR_SYM", "BAND_SYM", "BOR_SYM", 
		"BXOR_SYM", "BNOT_SYM", "LTE_SYM", "GTE_SYM", "LT_SYM", "GT_SYM", "EQUAL_SYM", 
		"NOTEQ_SYM", "ASSIGN_SYM", "FUNC_KEYWORD", "OP_KEYWORD", "RET_KEYWORD", 
		"RES_KEYWORD", "IF_KEYWORD", "WHILE_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORRD", 
		"INT_DATA_TYPE", "UINT_DATA_TYPE", "BYTE_DATA_TYPE", "UBYTE_DATA_TYPE", 
		"SHORT_DATA_TYPE", "USHORT_DATA_TYPE", "LONG_DATA_TYPE", "ULONG_DATA_TYPE", 
		"WHITE_SPACE", "ARABIC_INT_LITERAL", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "arac.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static aracParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public aracParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public aracParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public GlobalVarDeclContext[] globalVarDecl() {
			return GetRuleContexts<GlobalVarDeclContext>();
		}
		public GlobalVarDeclContext globalVarDecl(int i) {
			return GetRuleContext<GlobalVarDeclContext>(i);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public OperationDeclContext[] operationDecl() {
			return GetRuleContexts<OperationDeclContext>();
		}
		public OperationDeclContext operationDecl(int i) {
			return GetRuleContext<OperationDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 51;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_DATA_TYPE:
				case UINT_DATA_TYPE:
				case BYTE_DATA_TYPE:
				case UBYTE_DATA_TYPE:
				case SHORT_DATA_TYPE:
				case USHORT_DATA_TYPE:
				case LONG_DATA_TYPE:
				case ULONG_DATA_TYPE:
					{
					State = 48; globalVarDecl();
					}
					break;
				case FUNC_KEYWORD:
					{
					State = 49; functionDecl();
					}
					break;
				case OP_KEYWORD:
					{
					State = 50; operationDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC_KEYWORD) | (1L << OP_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		public GlobalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterGlobalVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitGlobalVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclContext globalVarDecl() {
		GlobalVarDeclContext _localctx = new GlobalVarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; dataType();
			State = 56; Match(ID);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN_SYM) {
				{
				State = 57; inititalization();
				}
			}

			State = 60; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InititalizationContext : ParserRuleContext {
		public ITerminalNode ASSIGN_SYM() { return GetToken(aracParser.ASSIGN_SYM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InititalizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inititalization; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterInititalization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitInititalization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInititalization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InititalizationContext inititalization() {
		InititalizationContext _localctx = new InititalizationContext(Context, State);
		EnterRule(_localctx, 4, RULE_inititalization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 62; Match(ASSIGN_SYM);
			State = 63; expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode FUNC_KEYWORD() { return GetToken(aracParser.FUNC_KEYWORD, 0); }
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode COLON() { return GetToken(aracParser.COLON, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(FUNC_KEYWORD);
			State = 66; Match(ID);
			State = 67; Match(RP);
			State = 68; paramList();
			State = 69; Match(LP);
			State = 70; Match(COLON);
			State = 71; dataType();
			State = 72; Match(RCB);
			State = 73; statementList();
			State = 74; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclContext : ParserRuleContext {
		public ITerminalNode OP_KEYWORD() { return GetToken(aracParser.OP_KEYWORD, 0); }
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public OperationDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterOperationDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitOperationDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclContext operationDecl() {
		OperationDeclContext _localctx = new OperationDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(OP_KEYWORD);
			State = 77; Match(ID);
			State = 78; Match(RP);
			State = 79; paramList();
			State = 80; Match(LP);
			State = 81; Match(RCB);
			State = 82; statementList();
			State = 83; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; dataType();
			State = 86; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] FASLA() { return GetTokens(aracParser.FASLA); }
		public ITerminalNode FASLA(int i) {
			return GetToken(aracParser.FASLA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) {
				{
				State = 88; parameter();
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 89; Match(FASLA);
					State = 90; parameter();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] FASLA() { return GetTokens(aracParser.FASLA); }
		public ITerminalNode FASLA(int i) {
			return GetToken(aracParser.FASLA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 16, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << RP) | (1L << ADDRESS_OF_OPERATOR) | (1L << VALUE_INSIDE_OPERATOR) | (1L << SIZE_OF) | (1L << PLUS) | (1L << LOGICAL_NOT) | (1L << BNOT_SYM) | (1L << ID))) != 0)) {
				{
				State = 100; argument();
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 101; Match(FASLA);
					State = 102; argument();
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivideExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DIVIDE() { return GetToken(aracParser.DIVIDE, 0); }
		public DivideExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterDivideExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitDivideExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddressExprContext : ExpressionContext {
		public ITerminalNode ADDRESS_OF_OPERATOR() { return GetToken(aracParser.ADDRESS_OF_OPERATOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddressExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterAddressExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitAddressExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationExprContext : ExpressionContext {
		public ITerminalNode PLUS() { return GetToken(aracParser.PLUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterNegationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitNegationExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftLeftExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode SL_SYM() { return GetToken(aracParser.SL_SYM, 0); }
		public ShiftLeftExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterShiftLeftExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitShiftLeftExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftLeftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BxorExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BXOR_SYM() { return GetToken(aracParser.BXOR_SYM, 0); }
		public BxorExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterBxorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitBxorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBxorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_opContext comparison_op() {
			return GetRuleContext<Comparison_opContext>(0);
		}
		public CompExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterCompExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitCompExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(aracParser.MULTIPLY, 0); }
		public MultiplyExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterMultiplyExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitMultiplyExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftRightExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode SR_SYM() { return GetToken(aracParser.SR_SYM, 0); }
		public ShiftRightExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterShiftRightExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitShiftRightExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftRightExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BandExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BAND_SYM() { return GetToken(aracParser.BAND_SYM, 0); }
		public BandExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterBandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitBandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LandExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LAND() { return GetToken(aracParser.LAND, 0); }
		public LandExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterLandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitLandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndirectionExprContext : ExpressionContext {
		public ITerminalNode VALUE_INSIDE_OPERATOR() { return GetToken(aracParser.VALUE_INSIDE_OPERATOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndirectionExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterIndirectionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitIndirectionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirectionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(aracParser.MINUS, 0); }
		public SubtractionExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterSubtractionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitSubtractionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrSubScripExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RSB() { return GetToken(aracParser.RSB, 0); }
		public ITerminalNode LSB() { return GetToken(aracParser.LSB, 0); }
		public ArrSubScripExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterArrSubScripExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitArrSubScripExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrSubScripExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LorExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOR() { return GetToken(aracParser.LOR, 0); }
		public LorExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterLorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitLorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExprContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public VariableExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterVariableExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitVariableExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunCallExprContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public FunCallExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterFunCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitFunCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Equality_opContext equality_op() {
			return GetRuleContext<Equality_opContext>(0);
		}
		public EqualityExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(aracParser.PLUS, 0); }
		public AddExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BorExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BOR_SYM() { return GetToken(aracParser.BOR_SYM, 0); }
		public BorExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterBorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitBorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		public ITerminalNode Literal() { return GetToken(aracParser.Literal, 0); }
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeExprContext : ExpressionContext {
		public ITerminalNode SIZE_OF() { return GetToken(aracParser.SIZE_OF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SizeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterSizeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitSizeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryBLExprContext : ExpressionContext {
		public UnaryBL_opContext unaryBL_op() {
			return GetRuleContext<UnaryBL_opContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryBLExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterUnaryBLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitUnaryBLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryBLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastingExprContext : ExpressionContext {
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastingExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterCastingExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitCastingExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastingExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExprContext : ExpressionContext {
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ParenthesisExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterParenthesisExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitParenthesisExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new FunCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 111; Match(ID);
				State = 112; Match(RP);
				State = 113; argumentList();
				State = 114; Match(LP);
				}
				break;
			case 2:
				{
				_localctx = new NegationExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116; Match(PLUS);
				State = 117; expression(22);
				}
				break;
			case 3:
				{
				_localctx = new UnaryBLExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118; unaryBL_op();
				State = 119; expression(21);
				}
				break;
			case 4:
				{
				_localctx = new CastingExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121; Match(RP);
				State = 122; dataType();
				State = 123; Match(LP);
				State = 124; expression(20);
				}
				break;
			case 5:
				{
				_localctx = new AddressExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126; Match(ADDRESS_OF_OPERATOR);
				State = 127; expression(19);
				}
				break;
			case 6:
				{
				_localctx = new IndirectionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128; Match(VALUE_INSIDE_OPERATOR);
				State = 129; expression(18);
				}
				break;
			case 7:
				{
				_localctx = new SizeExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 130; Match(SIZE_OF);
				State = 131; expression(17);
				}
				break;
			case 8:
				{
				_localctx = new ParenthesisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 132; Match(RP);
				State = 133; expression(0);
				State = 134; Match(LP);
				}
				break;
			case 9:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 136; Match(Literal);
				}
				break;
			case 10:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 186;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new DivideExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 141; Match(DIVIDE);
						State = 142; expression(17);
						}
						break;
					case 2:
						{
						_localctx = new MultiplyExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 144; Match(MULTIPLY);
						State = 145; expression(16);
						}
						break;
					case 3:
						{
						_localctx = new SubtractionExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 147; Match(MINUS);
						State = 148; expression(15);
						}
						break;
					case 4:
						{
						_localctx = new AddExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 150; Match(PLUS);
						State = 151; expression(14);
						}
						break;
					case 5:
						{
						_localctx = new ShiftLeftExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 152;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 153; Match(SL_SYM);
						State = 154; expression(13);
						}
						break;
					case 6:
						{
						_localctx = new ShiftRightExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 156; Match(SR_SYM);
						State = 157; expression(12);
						}
						break;
					case 7:
						{
						_localctx = new CompExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 159; comparison_op();
						State = 160; expression(11);
						}
						break;
					case 8:
						{
						_localctx = new EqualityExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 163; equality_op();
						State = 164; expression(10);
						}
						break;
					case 9:
						{
						_localctx = new BandExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 167; Match(BAND_SYM);
						State = 168; expression(9);
						}
						break;
					case 10:
						{
						_localctx = new BxorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 169;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 170; Match(BXOR_SYM);
						}
						State = 171; expression(8);
						}
						break;
					case 11:
						{
						_localctx = new BorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 172;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						{
						State = 173; Match(BOR_SYM);
						}
						State = 174; expression(7);
						}
						break;
					case 12:
						{
						_localctx = new LandExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 175;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 176; Match(LAND);
						}
						State = 177; expression(6);
						}
						break;
					case 13:
						{
						_localctx = new LorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 178;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						{
						State = 179; Match(LOR);
						}
						State = 180; expression(5);
						}
						break;
					case 14:
						{
						_localctx = new ArrSubScripExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 181;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 182; Match(RSB);
						State = 183; expression(0);
						State = 184; Match(LSB);
						}
						break;
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		public ITerminalNode GTE_SYM() { return GetToken(aracParser.GTE_SYM, 0); }
		public ITerminalNode LTE_SYM() { return GetToken(aracParser.LTE_SYM, 0); }
		public ITerminalNode GT_SYM() { return GetToken(aracParser.GT_SYM, 0); }
		public ITerminalNode LT_SYM() { return GetToken(aracParser.LT_SYM, 0); }
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterComparison_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitComparison_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparison_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTE_SYM) | (1L << GTE_SYM) | (1L << LT_SYM) | (1L << GT_SYM))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryBL_opContext : ParserRuleContext {
		public ITerminalNode LOGICAL_NOT() { return GetToken(aracParser.LOGICAL_NOT, 0); }
		public ITerminalNode BNOT_SYM() { return GetToken(aracParser.BNOT_SYM, 0); }
		public UnaryBL_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryBL_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterUnaryBL_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitUnaryBL_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryBL_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryBL_opContext unaryBL_op() {
		UnaryBL_opContext _localctx = new UnaryBL_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_unaryBL_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = TokenStream.LA(1);
			if ( !(_la==LOGICAL_NOT || _la==BNOT_SYM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_opContext : ParserRuleContext {
		public ITerminalNode EQUAL_SYM() { return GetToken(aracParser.EQUAL_SYM, 0); }
		public ITerminalNode NOTEQ_SYM() { return GetToken(aracParser.NOTEQ_SYM, 0); }
		public Equality_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterEquality_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitEquality_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_opContext equality_op() {
		Equality_opContext _localctx = new Equality_opContext(Context, State);
		EnterRule(_localctx, 24, RULE_equality_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_SYM || _la==NOTEQ_SYM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class If_StatContext : StatementContext {
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public If_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterIf_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitIf_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Var_DeclContext : StatementContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public Var_DeclContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterVar_Decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitVar_Decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_Decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Return_StatContext : StatementContext {
		public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public Return_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterReturn_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitReturn_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_StatContext : StatementContext {
		public ExpressionStatContext expressionStat() {
			return GetRuleContext<ExpressionStatContext>(0);
		}
		public Expression_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterExpression_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitExpression_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_StatContext : StatementContext {
		public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public While_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterWhile_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitWhile_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Result_StatContext : StatementContext {
		public ResultStatContext resultStat() {
			return GetRuleContext<ResultStatContext>(0);
		}
		public Result_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterResult_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitResult_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Operation_StatContext : StatementContext {
		public OperationStatContext operationStat() {
			return GetRuleContext<OperationStatContext>(0);
		}
		public Operation_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterOperation_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitOperation_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assignment_StatContext : StatementContext {
		public AssignmentStatContext assignmentStat() {
			return GetRuleContext<AssignmentStatContext>(0);
		}
		public Assignment_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterAssignment_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitAssignment_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new Assignment_StatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; assignmentStat();
				}
				break;
			case 2:
				_localctx = new Return_StatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; returnStat();
				}
				break;
			case 3:
				_localctx = new Result_StatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 199; resultStat();
				}
				break;
			case 4:
				_localctx = new If_StatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 200; ifStat();
				}
				break;
			case 5:
				_localctx = new While_StatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 201; whileStat();
				}
				break;
			case 6:
				_localctx = new Var_DeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 202; varDecl();
				}
				break;
			case 7:
				_localctx = new Expression_StatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 203; expressionStat();
				}
				break;
			case 8:
				_localctx = new Operation_StatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 204; operationStat();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 28, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << RP) | (1L << ADDRESS_OF_OPERATOR) | (1L << VALUE_INSIDE_OPERATOR) | (1L << SIZE_OF) | (1L << PLUS) | (1L << LOGICAL_NOT) | (1L << BNOT_SYM) | (1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 207; statement();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public ExpressionStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterExpressionStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitExpressionStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatContext expressionStat() {
		ExpressionStatContext _localctx = new ExpressionStatContext(Context, State);
		EnterRule(_localctx, 30, RULE_expressionStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; expression(0);
			State = 214; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationStatContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public OperationStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterOperationStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitOperationStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationStatContext operationStat() {
		OperationStatContext _localctx = new OperationStatContext(Context, State);
		EnterRule(_localctx, 32, RULE_operationStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(ID);
			State = 217; Match(RP);
			State = 218; argumentList();
			State = 219; Match(LP);
			State = 220; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode ASSIGN_SYM() { return GetToken(aracParser.ASSIGN_SYM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public AssignmentStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterAssignmentStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitAssignmentStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatContext assignmentStat() {
		AssignmentStatContext _localctx = new AssignmentStatContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignmentStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(ID);
			State = 223; Match(ASSIGN_SYM);
			State = 224; expression(0);
			State = 225; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ITerminalNode IF_KEYWORD() { return GetToken(aracParser.IF_KEYWORD, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(IF_KEYWORD);
			State = 228; Match(RP);
			State = 229; expression(0);
			State = 230; Match(LP);
			State = 231; Match(RCB);
			State = 232; statementList();
			State = 233; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		public ITerminalNode WHILE_KEYWORD() { return GetToken(aracParser.WHILE_KEYWORD, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterWhileStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitWhileStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(WHILE_KEYWORD);
			State = 236; Match(RP);
			State = 237; expression(0);
			State = 238; Match(LP);
			State = 239; Match(RCB);
			State = 240; statementList();
			State = 241; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		public ITerminalNode RET_KEYWORD() { return GetToken(aracParser.RET_KEYWORD, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(RET_KEYWORD);
			State = 244; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultStatContext : ParserRuleContext {
		public ITerminalNode RES_KEYWORD() { return GetToken(aracParser.RES_KEYWORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public ResultStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterResultStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitResultStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultStatContext resultStat() {
		ResultStatContext _localctx = new ResultStatContext(Context, State);
		EnterRule(_localctx, 42, RULE_resultStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(RES_KEYWORD);
			State = 247; expression(0);
			State = 248; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 44, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; dataType();
			State = 251; Match(ID);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN_SYM) {
				{
				State = 252; inititalization();
				}
			}

			State = 255; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public ITerminalNode INT_DATA_TYPE() { return GetToken(aracParser.INT_DATA_TYPE, 0); }
		public ITerminalNode UINT_DATA_TYPE() { return GetToken(aracParser.UINT_DATA_TYPE, 0); }
		public ITerminalNode BYTE_DATA_TYPE() { return GetToken(aracParser.BYTE_DATA_TYPE, 0); }
		public ITerminalNode UBYTE_DATA_TYPE() { return GetToken(aracParser.UBYTE_DATA_TYPE, 0); }
		public ITerminalNode SHORT_DATA_TYPE() { return GetToken(aracParser.SHORT_DATA_TYPE, 0); }
		public ITerminalNode USHORT_DATA_TYPE() { return GetToken(aracParser.USHORT_DATA_TYPE, 0); }
		public ITerminalNode LONG_DATA_TYPE() { return GetToken(aracParser.LONG_DATA_TYPE, 0); }
		public ITerminalNode ULONG_DATA_TYPE() { return GetToken(aracParser.ULONG_DATA_TYPE, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 15);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 23);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x106', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x36', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x37', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '=', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '^', '\n', '\b', '\f', '\b', '\xE', '\b', '\x61', '\v', 
		'\b', '\x5', '\b', '\x63', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'j', '\n', '\n', '\f', '\n', 
		'\xE', '\n', 'm', '\v', '\n', '\x5', '\n', 'o', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x8D', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xBD', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xC0', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xD0', '\n', '\xF', 
		'\x3', '\x10', '\a', '\x10', '\xD3', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xD6', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x100', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x2', 
		'\x3', '\x14', '\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x2', '\x6', '\x3', '\x2', ' ', '#', 
		'\x4', '\x2', '\x18', '\x18', '\x1F', '\x1F', '\x3', '\x2', '$', '%', 
		'\x3', '\x2', '/', '\x36', '\x2', '\x115', '\x2', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x39', '\x3', '\x2', '\x2', '\x2', '\x6', '@', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x43', '\x3', '\x2', '\x2', '\x2', '\n', 'N', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'W', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x10', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'n', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xD7', '\x3', '\x2', '\x2', '\x2', '\"', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xE0', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '(', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xF5', '\x3', '\x2', '\x2', '\x2', ',', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x30', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x36', '\x5', '\x4', '\x3', '\x2', 
		'\x33', '\x36', '\x5', '\b', '\x5', '\x2', '\x34', '\x36', '\x5', '\n', 
		'\x6', '\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x5', '\x30', '\x19', '\x2', 
		':', '<', '\a', '\x39', '\x2', '\x2', ';', '=', '\x5', '\x6', '\x4', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\xE', '\x2', '\x2', 
		'?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '&', '\x2', 
		'\x2', '\x41', '\x42', '\x5', '\x14', '\v', '\x2', '\x42', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\'', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\x39', '\x2', '\x2', '\x45', '\x46', '\a', '\x5', '\x2', 
		'\x2', '\x46', 'G', '\x5', '\xE', '\b', '\x2', 'G', 'H', '\a', '\x4', 
		'\x2', '\x2', 'H', 'I', '\a', '\xF', '\x2', '\x2', 'I', 'J', '\x5', '\x30', 
		'\x19', '\x2', 'J', 'K', '\a', '\t', '\x2', '\x2', 'K', 'L', '\x5', '\x1E', 
		'\x10', '\x2', 'L', 'M', '\a', '\b', '\x2', '\x2', 'M', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\a', '(', '\x2', '\x2', 'O', 'P', '\a', '\x39', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x5', '\x2', '\x2', 'Q', 'R', '\x5', '\xE', 
		'\b', '\x2', 'R', 'S', '\a', '\x4', '\x2', '\x2', 'S', 'T', '\a', '\t', 
		'\x2', '\x2', 'T', 'U', '\x5', '\x1E', '\x10', '\x2', 'U', 'V', '\a', 
		'\b', '\x2', '\x2', 'V', '\v', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x5', 
		'\x30', '\x19', '\x2', 'X', 'Y', '\a', '\x39', '\x2', '\x2', 'Y', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '_', '\x5', '\f', '\a', '\x2', '[', '\\', 
		'\a', '\r', '\x2', '\x2', '\\', '^', '\x5', '\f', '\a', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', 
		']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', 'Z', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\xF', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x5', '\x14', '\v', '\x2', '\x65', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'k', '\x5', '\x10', '\t', '\x2', 'g', 'h', '\a', '\r', 
		'\x2', '\x2', 'h', 'j', '\x5', '\x10', '\t', '\x2', 'i', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\b', '\v', '\x1', '\x2', 'q', 'r', 
		'\a', '\x39', '\x2', '\x2', 'r', 's', '\a', '\x5', '\x2', '\x2', 's', 
		't', '\x5', '\x12', '\n', '\x2', 't', 'u', '\a', '\x4', '\x2', '\x2', 
		'u', '\x8D', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x10', '\x2', 
		'\x2', 'w', '\x8D', '\x5', '\x14', '\v', '\x18', 'x', 'y', '\x5', '\x18', 
		'\r', '\x2', 'y', 'z', '\x5', '\x14', '\v', '\x17', 'z', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '\x5', '\x2', '\x2', '|', '}', '\x5', 
		'\x30', '\x19', '\x2', '}', '~', '\a', '\x4', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\x14', '\v', '\x16', '\x7F', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\n', '\x2', '\x2', '\x81', '\x8D', '\x5', '\x14', 
		'\v', '\x15', '\x82', '\x83', '\a', '\v', '\x2', '\x2', '\x83', '\x8D', 
		'\x5', '\x14', '\v', '\x14', '\x84', '\x85', '\a', '\f', '\x2', '\x2', 
		'\x85', '\x8D', '\x5', '\x14', '\v', '\x13', '\x86', '\x87', '\a', '\x5', 
		'\x2', '\x2', '\x87', '\x88', '\x5', '\x14', '\v', '\x2', '\x88', '\x89', 
		'\a', '\x4', '\x2', '\x2', '\x89', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8D', '\a', '\x3', '\x2', '\x2', '\x8B', '\x8D', '\a', '\x39', 
		'\x2', '\x2', '\x8C', 'p', '\x3', '\x2', '\x2', '\x2', '\x8C', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', 'x', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x82', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\f', 
		'\x12', '\x2', '\x2', '\x8F', '\x90', '\a', '\x13', '\x2', '\x2', '\x90', 
		'\xBD', '\x5', '\x14', '\v', '\x13', '\x91', '\x92', '\f', '\x11', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x12', '\x2', '\x2', '\x93', '\xBD', '\x5', 
		'\x14', '\v', '\x12', '\x94', '\x95', '\f', '\x10', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\x11', '\x2', '\x2', '\x96', '\xBD', '\x5', '\x14', '\v', 
		'\x11', '\x97', '\x98', '\f', '\xF', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\x10', '\x2', '\x2', '\x99', '\xBD', '\x5', '\x14', '\v', '\x10', '\x9A', 
		'\x9B', '\f', '\xE', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x19', '\x2', 
		'\x2', '\x9C', '\xBD', '\x5', '\x14', '\v', '\xF', '\x9D', '\x9E', '\f', 
		'\r', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x1B', '\x2', '\x2', '\x9F', 
		'\xBD', '\x5', '\x14', '\v', '\xE', '\xA0', '\xA1', '\f', '\f', '\x2', 
		'\x2', '\xA1', '\xA2', '\x5', '\x16', '\f', '\x2', '\xA2', '\xA3', '\x5', 
		'\x14', '\v', '\r', '\xA3', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\f', '\v', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\x1A', '\xE', 
		'\x2', '\xA6', '\xA7', '\x5', '\x14', '\v', '\f', '\xA7', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\f', '\n', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x1C', '\x2', '\x2', '\xAA', '\xBD', '\x5', '\x14', '\v', 
		'\v', '\xAB', '\xAC', '\f', '\t', '\x2', '\x2', '\xAC', '\xAD', '\a', 
		'\x1E', '\x2', '\x2', '\xAD', '\xBD', '\x5', '\x14', '\v', '\n', '\xAE', 
		'\xAF', '\f', '\b', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x1D', '\x2', 
		'\x2', '\xB0', '\xBD', '\x5', '\x14', '\v', '\t', '\xB1', '\xB2', '\f', 
		'\a', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x16', '\x2', '\x2', '\xB3', 
		'\xBD', '\x5', '\x14', '\v', '\b', '\xB4', '\xB5', '\f', '\x6', '\x2', 
		'\x2', '\xB5', '\xB6', '\a', '\x17', '\x2', '\x2', '\xB6', '\xBD', '\x5', 
		'\x14', '\v', '\a', '\xB7', '\xB8', '\f', '\x19', '\x2', '\x2', '\xB8', 
		'\xB9', '\a', '\a', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x14', '\v', 
		'\x2', '\xBA', '\xBB', '\a', '\x6', '\x2', '\x2', '\xBB', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\x8E', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\x97', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\t', 
		'\x2', '\x2', '\x2', '\xC2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\t', '\x3', '\x2', '\x2', '\xC4', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC6', '\t', '\x4', '\x2', '\x2', '\xC6', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xD0', '\x5', '$', '\x13', '\x2', '\xC8', 
		'\xD0', '\x5', '*', '\x16', '\x2', '\xC9', '\xD0', '\x5', ',', '\x17', 
		'\x2', '\xCA', '\xD0', '\x5', '&', '\x14', '\x2', '\xCB', '\xD0', '\x5', 
		'(', '\x15', '\x2', '\xCC', '\xD0', '\x5', '.', '\x18', '\x2', '\xCD', 
		'\xD0', '\x5', ' ', '\x11', '\x2', '\xCE', '\xD0', '\x5', '\"', '\x12', 
		'\x2', '\xCF', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD3', '\x5', '\x1C', '\xF', 
		'\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', 
		'\x14', '\v', '\x2', '\xD8', '\xD9', '\a', '\xE', '\x2', '\x2', '\xD9', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x39', '\x2', 
		'\x2', '\xDB', '\xDC', '\a', '\x5', '\x2', '\x2', '\xDC', '\xDD', '\x5', 
		'\x12', '\n', '\x2', '\xDD', '\xDE', '\a', '\x4', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\xE', '\x2', '\x2', '\xDF', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE1', '\a', '\x39', '\x2', '\x2', '\xE1', '\xE2', '\a', '&', 
		'\x2', '\x2', '\xE2', '\xE3', '\x5', '\x14', '\v', '\x2', '\xE3', '\xE4', 
		'\a', '\xE', '\x2', '\x2', '\xE4', '%', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\a', '+', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x5', '\x2', '\x2', 
		'\xE7', '\xE8', '\x5', '\x14', '\v', '\x2', '\xE8', '\xE9', '\a', '\x4', 
		'\x2', '\x2', '\xE9', '\xEA', '\a', '\t', '\x2', '\x2', '\xEA', '\xEB', 
		'\x5', '\x1E', '\x10', '\x2', '\xEB', '\xEC', '\a', '\b', '\x2', '\x2', 
		'\xEC', '\'', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', ',', '\x2', 
		'\x2', '\xEE', '\xEF', '\a', '\x5', '\x2', '\x2', '\xEF', '\xF0', '\x5', 
		'\x14', '\v', '\x2', '\xF0', '\xF1', '\a', '\x4', '\x2', '\x2', '\xF1', 
		'\xF2', '\a', '\t', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x1E', '\x10', 
		'\x2', '\xF3', '\xF4', '\a', '\b', '\x2', '\x2', '\xF4', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\a', ')', '\x2', '\x2', '\xF6', '\xF7', 
		'\a', '\xE', '\x2', '\x2', '\xF7', '+', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', '*', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\x14', '\v', 
		'\x2', '\xFA', '\xFB', '\a', '\xE', '\x2', '\x2', '\xFB', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x30', '\x19', '\x2', '\xFD', 
		'\xFF', '\a', '\x39', '\x2', '\x2', '\xFE', '\x100', '\x5', '\x6', '\x4', 
		'\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\xE', '\x2', '\x2', '\x102', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\t', '\x5', '\x2', '\x2', '\x104', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x35', '\x37', '<', '_', '\x62', 'k', 'n', 
		'\x8C', '\xBC', '\xBE', '\xCF', '\xD4', '\xFF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrExamples.Parser
