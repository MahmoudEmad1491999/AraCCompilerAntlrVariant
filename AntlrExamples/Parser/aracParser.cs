//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mahmoud/projects/AraCCompilerAntlrVariant/AntlrExamples/arac.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrExamples.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class aracParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, LP=11, RP=12, LSB=13, RSB=14, LCB=15, RCB=16, ADDRESS_OF_OPERATOR=17, 
		VALUE_INSIDE_OPERATOR=18, SIZE_OF=19, FASLA=20, FASLA_MANQUOTA=21, COLON=22, 
		PLUS=23, MINUS=24, MULTIPLY=25, DIVIDE=26, ARABIC_MODULS=27, MODULUS=28, 
		LAND=29, LOR=30, LNOT=31, SL_SYM=32, SRA_SYM=33, SR_SYM=34, BAND_SYM=35, 
		BOR_SYM=36, BXOR_SYM=37, BNOT_SYM=38, LTE_SYM=39, GTE_SYM=40, LT_SYM=41, 
		GT_SYM=42, EQUAL_SYM=43, NOTEQ_SYM=44, ASSIGN_SYM=45, FUNC_KEYWORD=46, 
		OP_KEYWORD=47, RET_KEYWORD=48, RES_KEYWORD=49, IF_KEYWORD=50, WHILE_KEYWORD=51, 
		BREAK_KEYWORD=52, CONTINUE_KEYWORRD=53, INT_DATA_TYPE=54, UINT_DATA_TYPE=55, 
		BYTE_DATA_TYPE=56, UBYTE_DATA_TYPE=57, SHORT_DATA_TYPE=58, USHORT_DATA_TYPE=59, 
		LONG_DATA_TYPE=60, ULONG_DATA_TYPE=61, WHITE_SPACE=62, ID=63;
	public const int
		RULE_program = 0, RULE_globalVarDecl = 1, RULE_inititalization = 2, RULE_functionDecl = 3, 
		RULE_operationDecl = 4, RULE_parameter = 5, RULE_paramList = 6, RULE_argument = 7, 
		RULE_argumentList = 8, RULE_expression = 9, RULE_int_literal = 10, RULE_comparison_op = 11, 
		RULE_equality_op = 12, RULE_statement = 13, RULE_statementList = 14, RULE_operationStat = 15, 
		RULE_assignmentStat = 16, RULE_ifStat = 17, RULE_whileStat = 18, RULE_returnStat = 19, 
		RULE_resultStat = 20, RULE_varDecl = 21, RULE_dataType = 22;
	public static readonly string[] ruleNames = {
		"program", "globalVarDecl", "inititalization", "functionDecl", "operationDecl", 
		"parameter", "paramList", "argument", "argumentList", "expression", "int_literal", 
		"comparison_op", "equality_op", "statement", "statementList", "operationStat", 
		"assignmentStat", "ifStat", "whileStat", "returnStat", "resultStat", "varDecl", 
		"dataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u0660'", "'\u0661'", "'\u0662'", "'\u0663'", "'\u0664'", "'\u0665'", 
		"'\u0666'", "'\u0667'", "'\u0668'", "'\u0669'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'&:'", "'*:'", "'\u062D\u062C\u0645:'", "'\u060C'", "'\u061B'", 
		"':'", "'+'", "'-'", "'\u00D7'", "'\u00F7'", "'\u066A'", "'%'", "'&&'", 
		"'||'", "'!'", "'<<'", "'>>>'", "'>>'", "'&'", "'|'", "'^'", "'~'", "'<='", 
		"'>='", "'<'", "'>'", "'=='", "'!='", "':='", "'\u062F\u0627\u0644\u0629'", 
		"'\u0639\u0645\u0644\u064A\u0629'", "'\u0631\u062C\u0648\u0639'", "'\u0627\u0644\u0646\u0627\u062A\u062C'", 
		null, "'\u0637\u0627\u0644\u0645\u0627'", "'\u0642\u0637\u0639'", null, 
		"'\u0635\u062D\u064A\u062D_\u0664'", "'\u0637\u0628\u064A\u0639\u064A_\u0664'", 
		"'\u0635\u062D\u064A\u062D_\u0661'", "'\u0637\u0628\u064A\u0639\u064A_\u0661'", 
		"'\u0635\u062D\u064A\u062D_\u0662'", "'\u0637\u0628\u064A\u0639\u064A_\u0662'", 
		"'\u0635\u062D\u064A\u062D_\u0668'", "'\u0637\u0628\u064A\u0639\u064A_\u0668'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "LP", 
		"RP", "LSB", "RSB", "LCB", "RCB", "ADDRESS_OF_OPERATOR", "VALUE_INSIDE_OPERATOR", 
		"SIZE_OF", "FASLA", "FASLA_MANQUOTA", "COLON", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "ARABIC_MODULS", "MODULUS", "LAND", "LOR", "LNOT", "SL_SYM", 
		"SRA_SYM", "SR_SYM", "BAND_SYM", "BOR_SYM", "BXOR_SYM", "BNOT_SYM", "LTE_SYM", 
		"GTE_SYM", "LT_SYM", "GT_SYM", "EQUAL_SYM", "NOTEQ_SYM", "ASSIGN_SYM", 
		"FUNC_KEYWORD", "OP_KEYWORD", "RET_KEYWORD", "RES_KEYWORD", "IF_KEYWORD", 
		"WHILE_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORRD", "INT_DATA_TYPE", 
		"UINT_DATA_TYPE", "BYTE_DATA_TYPE", "UBYTE_DATA_TYPE", "SHORT_DATA_TYPE", 
		"USHORT_DATA_TYPE", "LONG_DATA_TYPE", "ULONG_DATA_TYPE", "WHITE_SPACE", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "arac.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static aracParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public aracParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public aracParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public GlobalVarDeclContext[] globalVarDecl() {
			return GetRuleContexts<GlobalVarDeclContext>();
		}
		public GlobalVarDeclContext globalVarDecl(int i) {
			return GetRuleContext<GlobalVarDeclContext>(i);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public OperationDeclContext[] operationDecl() {
			return GetRuleContexts<OperationDeclContext>();
		}
		public OperationDeclContext operationDecl(int i) {
			return GetRuleContext<OperationDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 49;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_DATA_TYPE:
				case UINT_DATA_TYPE:
				case BYTE_DATA_TYPE:
				case UBYTE_DATA_TYPE:
				case SHORT_DATA_TYPE:
				case USHORT_DATA_TYPE:
				case LONG_DATA_TYPE:
				case ULONG_DATA_TYPE:
					{
					State = 46; globalVarDecl();
					}
					break;
				case FUNC_KEYWORD:
					{
					State = 47; functionDecl();
					}
					break;
				case OP_KEYWORD:
					{
					State = 48; operationDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC_KEYWORD) | (1L << OP_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public GlobalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterGlobalVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitGlobalVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclContext globalVarDecl() {
		GlobalVarDeclContext _localctx = new GlobalVarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; dataType();
			State = 54; Match(ID);
			State = 55; inititalization();
			State = 56; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InititalizationContext : ParserRuleContext {
		public ITerminalNode ASSIGN_SYM() { return GetToken(aracParser.ASSIGN_SYM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InititalizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inititalization; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterInititalization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitInititalization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInititalization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InititalizationContext inititalization() {
		InititalizationContext _localctx = new InititalizationContext(Context, State);
		EnterRule(_localctx, 4, RULE_inititalization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 58; Match(ASSIGN_SYM);
			State = 59; expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode FUNC_KEYWORD() { return GetToken(aracParser.FUNC_KEYWORD, 0); }
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode COLON() { return GetToken(aracParser.COLON, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(FUNC_KEYWORD);
			State = 62; Match(ID);
			State = 63; Match(RP);
			State = 64; paramList();
			State = 65; Match(LP);
			State = 66; Match(COLON);
			State = 67; dataType();
			State = 68; Match(RCB);
			State = 69; statementList();
			State = 70; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclContext : ParserRuleContext {
		public ITerminalNode OP_KEYWORD() { return GetToken(aracParser.OP_KEYWORD, 0); }
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public OperationDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterOperationDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitOperationDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclContext operationDecl() {
		OperationDeclContext _localctx = new OperationDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(OP_KEYWORD);
			State = 73; Match(ID);
			State = 74; Match(RP);
			State = 75; paramList();
			State = 76; Match(LP);
			State = 77; Match(RCB);
			State = 78; statementList();
			State = 79; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; dataType();
			State = 82; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] FASLA() { return GetTokens(aracParser.FASLA); }
		public ITerminalNode FASLA(int i) {
			return GetToken(aracParser.FASLA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) {
				{
				State = 84; parameter();
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 85; Match(FASLA);
					State = 86; parameter();
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] FASLA() { return GetTokens(aracParser.FASLA); }
		public ITerminalNode FASLA(int i) {
			return GetToken(aracParser.FASLA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 16, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << RP) | (1L << MINUS) | (1L << LNOT) | (1L << ID))) != 0)) {
				{
				State = 96; argument();
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 97; Match(FASLA);
					State = 98; argument();
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Lor_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOR() { return GetToken(aracParser.LOR, 0); }
		public Lor_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterLor_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitLor_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLor_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(aracParser.PLUS, 0); }
		public Add_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterAdd_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitAdd_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Land_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LAND() { return GetToken(aracParser.LAND, 0); }
		public Land_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterLand_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitLand_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLand_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_opContext comparison_op() {
			return GetRuleContext<Comparison_opContext>(0);
		}
		public Comparison_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterComparison_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitComparison_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(aracParser.MULTIPLY, 0); }
		public Multiply_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterMultiply_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitMultiply_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_exprContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public Variable_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterVariable_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitVariable_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Parenthesis_exprContext : ExpressionContext {
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public Parenthesis_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterParenthesis_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitParenthesis_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Int_literal_exprContext : ExpressionContext {
		public Int_literalContext int_literal() {
			return GetRuleContext<Int_literalContext>(0);
		}
		public Int_literal_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterInt_literal_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitInt_literal_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtraction_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(aracParser.MINUS, 0); }
		public Subtraction_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterSubtraction_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitSubtraction_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DIVIDE() { return GetToken(aracParser.DIVIDE, 0); }
		public Divide_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterDivide_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitDivide_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Fun_call_exprContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public Fun_call_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterFun_call_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitFun_call_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFun_call_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Minus_exprContext : ExpressionContext {
		public ITerminalNode MINUS() { return GetToken(aracParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Minus_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterMinus_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitMinus_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lnot_exprContext : ExpressionContext {
		public ITerminalNode LNOT() { return GetToken(aracParser.LNOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Lnot_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterLnot_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitLnot_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLnot_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equality_exprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Equality_opContext equality_op() {
			return GetRuleContext<Equality_opContext>(0);
		}
		public Equality_exprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterEquality_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitEquality_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new Fun_call_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 107; Match(ID);
				State = 108; Match(RP);
				State = 109; argumentList();
				State = 110; Match(LP);
				}
				break;
			case 2:
				{
				_localctx = new Minus_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112; Match(MINUS);
				State = 113; expression(13);
				}
				break;
			case 3:
				{
				_localctx = new Lnot_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114; Match(LNOT);
				State = 115; expression(12);
				}
				break;
			case 4:
				{
				_localctx = new Parenthesis_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116; Match(RP);
				State = 117; expression(0);
				State = 118; Match(LP);
				}
				break;
			case 5:
				{
				_localctx = new Int_literal_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120; int_literal();
				}
				break;
			case 6:
				{
				_localctx = new Variable_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 150;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new Divide_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 125; Match(DIVIDE);
						State = 126; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new Multiply_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 128; Match(MULTIPLY);
						State = 129; expression(11);
						}
						break;
					case 3:
						{
						_localctx = new Subtraction_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 131; Match(MINUS);
						State = 132; expression(10);
						}
						break;
					case 4:
						{
						_localctx = new Add_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 134; Match(PLUS);
						State = 135; expression(9);
						}
						break;
					case 5:
						{
						_localctx = new Comparison_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 137; comparison_op();
						State = 138; expression(8);
						}
						break;
					case 6:
						{
						_localctx = new Equality_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 141; equality_op();
						State = 142; expression(7);
						}
						break;
					case 7:
						{
						_localctx = new Land_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 145; Match(LAND);
						}
						State = 146; expression(6);
						}
						break;
					case 8:
						{
						_localctx = new Lor_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						{
						State = 148; Match(LOR);
						}
						State = 149; expression(5);
						}
						break;
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Int_literalContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(aracParser.COLON, 0); }
		public ITerminalNode PLUS() { return GetToken(aracParser.PLUS, 0); }
		public Int_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterInt_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitInt_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_literalContext int_literal() {
		Int_literalContext _localctx = new Int_literalContext(Context, State);
		EnterRule(_localctx, 20, RULE_int_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 155;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0) );
			State = 160; Match(COLON);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 161; Match(PLUS);
				}
			}

			State = 164;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__4) | (1L << T__8))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		public ITerminalNode GTE_SYM() { return GetToken(aracParser.GTE_SYM, 0); }
		public ITerminalNode LTE_SYM() { return GetToken(aracParser.LTE_SYM, 0); }
		public ITerminalNode GT_SYM() { return GetToken(aracParser.GT_SYM, 0); }
		public ITerminalNode LT_SYM() { return GetToken(aracParser.LT_SYM, 0); }
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterComparison_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitComparison_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_comparison_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTE_SYM) | (1L << GTE_SYM) | (1L << LT_SYM) | (1L << GT_SYM))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_opContext : ParserRuleContext {
		public ITerminalNode EQUAL_SYM() { return GetToken(aracParser.EQUAL_SYM, 0); }
		public ITerminalNode NOTEQ_SYM() { return GetToken(aracParser.NOTEQ_SYM, 0); }
		public Equality_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterEquality_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitEquality_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_opContext equality_op() {
		Equality_opContext _localctx = new Equality_opContext(Context, State);
		EnterRule(_localctx, 24, RULE_equality_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_SYM || _la==NOTEQ_SYM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class If_StatContext : StatementContext {
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public If_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterIf_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitIf_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Var_DeclContext : StatementContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public Var_DeclContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterVar_Decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitVar_Decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_Decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Return_StatContext : StatementContext {
		public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public Return_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterReturn_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitReturn_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_StatContext : StatementContext {
		public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public While_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterWhile_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitWhile_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Result_StatContext : StatementContext {
		public ResultStatContext resultStat() {
			return GetRuleContext<ResultStatContext>(0);
		}
		public Result_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterResult_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitResult_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Operation_StatContext : StatementContext {
		public OperationStatContext operationStat() {
			return GetRuleContext<OperationStatContext>(0);
		}
		public Operation_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterOperation_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitOperation_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assignment_StatContext : StatementContext {
		public AssignmentStatContext assignmentStat() {
			return GetRuleContext<AssignmentStatContext>(0);
		}
		public Assignment_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterAssignment_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitAssignment_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new Assignment_StatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; assignmentStat();
				}
				break;
			case 2:
				_localctx = new Return_StatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; returnStat();
				}
				break;
			case 3:
				_localctx = new Result_StatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; resultStat();
				}
				break;
			case 4:
				_localctx = new If_StatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173; ifStat();
				}
				break;
			case 5:
				_localctx = new While_StatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 174; whileStat();
				}
				break;
			case 6:
				_localctx = new Var_DeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 175; varDecl();
				}
				break;
			case 7:
				_localctx = new Operation_StatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 176; operationStat();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 28, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 179; statement();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationStatContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public OperationStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterOperationStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitOperationStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationStatContext operationStat() {
		OperationStatContext _localctx = new OperationStatContext(Context, State);
		EnterRule(_localctx, 30, RULE_operationStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(ID);
			State = 186; Match(RP);
			State = 187; argumentList();
			State = 188; Match(LP);
			State = 189; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public ITerminalNode ASSIGN_SYM() { return GetToken(aracParser.ASSIGN_SYM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public AssignmentStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterAssignmentStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitAssignmentStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatContext assignmentStat() {
		AssignmentStatContext _localctx = new AssignmentStatContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignmentStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(ID);
			State = 192; Match(ASSIGN_SYM);
			State = 193; expression(0);
			State = 194; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ITerminalNode IF_KEYWORD() { return GetToken(aracParser.IF_KEYWORD, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(IF_KEYWORD);
			State = 197; Match(RP);
			State = 198; expression(0);
			State = 199; Match(LP);
			State = 200; Match(RCB);
			State = 201; statementList();
			State = 202; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		public ITerminalNode WHILE_KEYWORD() { return GetToken(aracParser.WHILE_KEYWORD, 0); }
		public ITerminalNode RP() { return GetToken(aracParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(aracParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(aracParser.RCB, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode LCB() { return GetToken(aracParser.LCB, 0); }
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterWhileStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitWhileStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 36, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(WHILE_KEYWORD);
			State = 205; Match(RP);
			State = 206; expression(0);
			State = 207; Match(LP);
			State = 208; Match(RCB);
			State = 209; statementList();
			State = 210; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		public ITerminalNode RET_KEYWORD() { return GetToken(aracParser.RET_KEYWORD, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(RET_KEYWORD);
			State = 213; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultStatContext : ParserRuleContext {
		public ITerminalNode RES_KEYWORD() { return GetToken(aracParser.RES_KEYWORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public ResultStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterResultStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitResultStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultStatContext resultStat() {
		ResultStatContext _localctx = new ResultStatContext(Context, State);
		EnterRule(_localctx, 40, RULE_resultStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(RES_KEYWORD);
			State = 216; expression(0);
			State = 217; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(aracParser.ID, 0); }
		public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(aracParser.FASLA_MANQUOTA, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 42, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; dataType();
			State = 220; Match(ID);
			State = 221; inititalization();
			State = 222; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public ITerminalNode INT_DATA_TYPE() { return GetToken(aracParser.INT_DATA_TYPE, 0); }
		public ITerminalNode UINT_DATA_TYPE() { return GetToken(aracParser.UINT_DATA_TYPE, 0); }
		public ITerminalNode BYTE_DATA_TYPE() { return GetToken(aracParser.BYTE_DATA_TYPE, 0); }
		public ITerminalNode UBYTE_DATA_TYPE() { return GetToken(aracParser.UBYTE_DATA_TYPE, 0); }
		public ITerminalNode SHORT_DATA_TYPE() { return GetToken(aracParser.SHORT_DATA_TYPE, 0); }
		public ITerminalNode USHORT_DATA_TYPE() { return GetToken(aracParser.USHORT_DATA_TYPE, 0); }
		public ITerminalNode LONG_DATA_TYPE() { return GetToken(aracParser.LONG_DATA_TYPE, 0); }
		public ITerminalNode ULONG_DATA_TYPE() { return GetToken(aracParser.ULONG_DATA_TYPE, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IaracListener typedListener = listener as IaracListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IaracVisitor<TResult> typedVisitor = visitor as IaracVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\xE5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x34', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x35', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', 'Z', '\n', '\b', '\f', '\b', '\xE', '\b', 
		']', '\v', '\b', '\x5', '\b', '_', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x66', '\n', '\n', 
		'\f', '\n', '\xE', '\n', 'i', '\v', '\n', '\x5', '\n', 'k', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '}', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x99', '\n', '\v', '\f', '\v', '\xE', '\v', '\x9C', '\v', 
		'\v', '\x3', '\f', '\x6', '\f', '\x9F', '\n', '\f', '\r', '\f', '\xE', 
		'\f', '\xA0', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA5', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xB4', '\n', '\xF', 
		'\x3', '\x10', '\a', '\x10', '\xB7', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xBA', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x2', '\x3', 
		'\x14', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x2', '\a', '\x3', '\x2', '\x3', '\f', '\x5', 
		'\x2', '\x4', '\x5', '\a', '\a', '\v', '\v', '\x3', '\x2', ')', ',', '\x3', 
		'\x2', '-', '.', '\x3', '\x2', '\x38', '?', '\x2', '\xEA', '\x2', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', '?', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'J', '\x3', '\x2', '\x2', '\x2', '\f', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '^', '\x3', '\x2', '\x2', '\x2', '\x10', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'j', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', ' ', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xC1', '\x3', '\x2', '\x2', '\x2', '$', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xCE', '\x3', '\x2', '\x2', '\x2', '(', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xD9', '\x3', '\x2', '\x2', '\x2', ',', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xE2', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x34', '\x5', '\x4', '\x3', '\x2', '\x31', '\x34', '\x5', '\b', '\x5', 
		'\x2', '\x32', '\x34', '\x5', '\n', '\x6', '\x2', '\x33', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x3', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\x5', '.', '\x18', '\x2', '\x38', '\x39', '\a', '\x41', '\x2', 
		'\x2', '\x39', ':', '\x5', '\x6', '\x4', '\x2', ':', ';', '\a', '\x17', 
		'\x2', '\x2', ';', '\x5', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 
		'/', '\x2', '\x2', '=', '>', '\x5', '\x14', '\v', '\x2', '>', '\a', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '\x30', '\x2', '\x2', '@', '\x41', 
		'\a', '\x41', '\x2', '\x2', '\x41', '\x42', '\a', '\xE', '\x2', '\x2', 
		'\x42', '\x43', '\x5', '\xE', '\b', '\x2', '\x43', '\x44', '\a', '\r', 
		'\x2', '\x2', '\x44', '\x45', '\a', '\x18', '\x2', '\x2', '\x45', '\x46', 
		'\x5', '.', '\x18', '\x2', '\x46', 'G', '\a', '\x12', '\x2', '\x2', 'G', 
		'H', '\x5', '\x1E', '\x10', '\x2', 'H', 'I', '\a', '\x11', '\x2', '\x2', 
		'I', '\t', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x31', '\x2', 
		'\x2', 'K', 'L', '\a', '\x41', '\x2', '\x2', 'L', 'M', '\a', '\xE', '\x2', 
		'\x2', 'M', 'N', '\x5', '\xE', '\b', '\x2', 'N', 'O', '\a', '\r', '\x2', 
		'\x2', 'O', 'P', '\a', '\x12', '\x2', '\x2', 'P', 'Q', '\x5', '\x1E', 
		'\x10', '\x2', 'Q', 'R', '\a', '\x11', '\x2', '\x2', 'R', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\x5', '.', '\x18', '\x2', 'T', 'U', '\a', 
		'\x41', '\x2', '\x2', 'U', '\r', '\x3', '\x2', '\x2', '\x2', 'V', '[', 
		'\x5', '\f', '\a', '\x2', 'W', 'X', '\a', '\x16', '\x2', '\x2', 'X', 'Z', 
		'\x5', '\f', '\a', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', ']', 
		'\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', '^', 'V', '\x3', '\x2', '\x2', '\x2', 
		'^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x5', '\x14', '\v', '\x2', '\x61', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x62', 'g', '\x5', '\x10', '\t', '\x2', '\x63', 
		'\x64', '\a', '\x16', '\x2', '\x2', '\x64', '\x66', '\x5', '\x10', '\t', 
		'\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 
		'g', '\x3', '\x2', '\x2', '\x2', 'j', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\b', '\v', '\x1', '\x2', 'm', 'n', '\a', '\x41', '\x2', 
		'\x2', 'n', 'o', '\a', '\xE', '\x2', '\x2', 'o', 'p', '\x5', '\x12', '\n', 
		'\x2', 'p', 'q', '\a', '\r', '\x2', '\x2', 'q', '}', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '\x1A', '\x2', '\x2', 's', '}', '\x5', '\x14', 
		'\v', '\xF', 't', 'u', '\a', '!', '\x2', '\x2', 'u', '}', '\x5', '\x14', 
		'\v', '\xE', 'v', 'w', '\a', '\xE', '\x2', '\x2', 'w', 'x', '\x5', '\x14', 
		'\v', '\x2', 'x', 'y', '\a', '\r', '\x2', '\x2', 'y', '}', '\x3', '\x2', 
		'\x2', '\x2', 'z', '}', '\x5', '\x16', '\f', '\x2', '{', '}', '\a', '\x41', 
		'\x2', '\x2', '|', 'l', '\x3', '\x2', '\x2', '\x2', '|', 'r', '\x3', '\x2', 
		'\x2', '\x2', '|', 't', '\x3', '\x2', '\x2', '\x2', '|', 'v', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x9A', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\f', 
		'\r', '\x2', '\x2', '\x7F', '\x80', '\a', '\x1C', '\x2', '\x2', '\x80', 
		'\x99', '\x5', '\x14', '\v', '\xE', '\x81', '\x82', '\f', '\f', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\x1B', '\x2', '\x2', '\x83', '\x99', '\x5', 
		'\x14', '\v', '\r', '\x84', '\x85', '\f', '\v', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\x1A', '\x2', '\x2', '\x86', '\x99', '\x5', '\x14', '\v', 
		'\f', '\x87', '\x88', '\f', '\n', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\x19', '\x2', '\x2', '\x89', '\x99', '\x5', '\x14', '\v', '\v', '\x8A', 
		'\x8B', '\f', '\t', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x18', '\r', 
		'\x2', '\x8C', '\x8D', '\x5', '\x14', '\v', '\n', '\x8D', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\f', '\b', '\x2', '\x2', '\x8F', 
		'\x90', '\x5', '\x1A', '\xE', '\x2', '\x90', '\x91', '\x5', '\x14', '\v', 
		'\t', '\x91', '\x99', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\f', 
		'\a', '\x2', '\x2', '\x93', '\x94', '\a', '\x1F', '\x2', '\x2', '\x94', 
		'\x99', '\x5', '\x14', '\v', '\b', '\x95', '\x96', '\f', '\x6', '\x2', 
		'\x2', '\x96', '\x97', '\a', ' ', '\x2', '\x2', '\x97', '\x99', '\x5', 
		'\x14', '\v', '\a', '\x98', '~', '\x3', '\x2', '\x2', '\x2', '\x98', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x87', '\x3', '\x2', '\x2', '\x2', '\x98', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x98', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9F', '\t', '\x2', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\a', '\x18', 
		'\x2', '\x2', '\xA3', '\xA5', '\a', '\x19', '\x2', '\x2', '\xA4', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\t', '\x3', 
		'\x2', '\x2', '\xA7', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', 
		'\t', '\x4', '\x2', '\x2', '\xA9', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAB', '\t', '\x5', '\x2', '\x2', '\xAB', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xB4', '\x5', '\"', '\x12', '\x2', '\xAD', '\xB4', 
		'\x5', '(', '\x15', '\x2', '\xAE', '\xB4', '\x5', '*', '\x16', '\x2', 
		'\xAF', '\xB4', '\x5', '$', '\x13', '\x2', '\xB0', '\xB4', '\x5', '&', 
		'\x14', '\x2', '\xB1', '\xB4', '\x5', ',', '\x17', '\x2', '\xB2', '\xB4', 
		'\x5', ' ', '\x11', '\x2', '\xB3', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB7', '\x5', '\x1C', '\xF', '\x2', '\xB6', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x41', '\x2', '\x2', 
		'\xBC', '\xBD', '\a', '\xE', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x12', 
		'\n', '\x2', '\xBE', '\xBF', '\a', '\r', '\x2', '\x2', '\xBF', '\xC0', 
		'\a', '\x17', '\x2', '\x2', '\xC0', '!', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\a', '\x41', '\x2', '\x2', '\xC2', '\xC3', '\a', '/', '\x2', 
		'\x2', '\xC3', '\xC4', '\x5', '\x14', '\v', '\x2', '\xC4', '\xC5', '\a', 
		'\x17', '\x2', '\x2', '\xC5', '#', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\a', '\x34', '\x2', '\x2', '\xC7', '\xC8', '\a', '\xE', '\x2', 
		'\x2', '\xC8', '\xC9', '\x5', '\x14', '\v', '\x2', '\xC9', '\xCA', '\a', 
		'\r', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x12', '\x2', '\x2', '\xCB', 
		'\xCC', '\x5', '\x1E', '\x10', '\x2', '\xCC', '\xCD', '\a', '\x11', '\x2', 
		'\x2', '\xCD', '%', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\x35', '\x2', '\x2', '\xCF', '\xD0', '\a', '\xE', '\x2', '\x2', '\xD0', 
		'\xD1', '\x5', '\x14', '\v', '\x2', '\xD1', '\xD2', '\a', '\r', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\x12', '\x2', '\x2', '\xD3', '\xD4', '\x5', 
		'\x1E', '\x10', '\x2', '\xD4', '\xD5', '\a', '\x11', '\x2', '\x2', '\xD5', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x32', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\x17', '\x2', '\x2', '\xD8', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '\x33', '\x2', '\x2', '\xDA', 
		'\xDB', '\x5', '\x14', '\v', '\x2', '\xDB', '\xDC', '\a', '\x17', '\x2', 
		'\x2', '\xDC', '+', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x5', 
		'.', '\x18', '\x2', '\xDE', '\xDF', '\a', '\x41', '\x2', '\x2', '\xDF', 
		'\xE0', '\x5', '\x6', '\x4', '\x2', '\xE0', '\xE1', '\a', '\x17', '\x2', 
		'\x2', '\xE1', '-', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\t', 
		'\x6', '\x2', '\x2', '\xE3', '/', '\x3', '\x2', '\x2', '\x2', '\xF', '\x33', 
		'\x35', '[', '^', 'g', 'j', '|', '\x98', '\x9A', '\xA0', '\xA4', '\xB3', 
		'\xB8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrExamples.Parser
