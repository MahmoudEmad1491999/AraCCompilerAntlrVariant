//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mahmoud/projects/AraCCompilerAntlrVariant/AntlrExamples/AraC.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AraCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Literal=1, LP=2, RP=3, LSB=4, RSB=5, LCB=6, RCB=7, ADDRESS_OF_OPERATOR=8, 
		VALUE_INSIDE_OPERATOR=9, SIZE_OF=10, DOT=11, FASLA=12, FASLA_MANQUOTA=13, 
		COLON=14, PLUS=15, MINUS=16, MULTIPLY=17, DIVIDE=18, ARABIC_MODULS=19, 
		MODULUS=20, LAND=21, LOR=22, LOGICAL_NOT=23, SL_SYM=24, SRA_SYM=25, SR_SYM=26, 
		BAND_SYM=27, BOR_SYM=28, BXOR_SYM=29, BNOT_SYM=30, LTE_SYM=31, GTE_SYM=32, 
		LT_SYM=33, GT_SYM=34, EQUAL_SYM=35, NOTEQ_SYM=36, ASSIGN_SYM=37, FUNC_KEYWORD=38, 
		OP_KEYWORD=39, RET_KEYWORD=40, RES_KEYWORD=41, IF_KEYWORD=42, WHILE_KEYWORD=43, 
		BREAK_KEYWORD=44, CONTINUE_KEYWORRD=45, INT_DATA_TYPE=46, UINT_DATA_TYPE=47, 
		BYTE_DATA_TYPE=48, UBYTE_DATA_TYPE=49, SHORT_DATA_TYPE=50, USHORT_DATA_TYPE=51, 
		LONG_DATA_TYPE=52, ULONG_DATA_TYPE=53, WHITE_SPACE=54, ARABIC_INT_LITERAL=55, 
		ENGLISH_INT_LITERAL=56, ID=57;
	public const int
		RULE_program = 0, RULE_globalVarDecl = 1, RULE_funcDecl = 2, RULE_opDecl = 3, 
		RULE_paramList = 4, RULE_expression = 5, RULE_argumentList = 6, RULE_statement = 7, 
		RULE_assignmentStat = 8, RULE_ifStat = 9, RULE_whileStat = 10, RULE_returnStat = 11, 
		RULE_resultStat = 12, RULE_varDecl = 13, RULE_dataType = 14;
	public static readonly string[] ruleNames = {
		"program", "globalVarDecl", "funcDecl", "opDecl", "paramList", "expression", 
		"argumentList", "statement", "assignmentStat", "ifStat", "whileStat", 
		"returnStat", "resultStat", "varDecl", "dataType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "'&:'", "'*:'", 
		"'\u062D\u062C\u0645:'", "'.'", "'\u060C'", "'\u061B'", "':'", "'+'", 
		"'-'", "'\u00D7'", "'\u00F7'", "'\u066A'", "'%'", "'&&'", "'||'", "'!'", 
		"'<<'", "'>>>'", "'>>'", "'&'", "'|'", "'^'", "'~'", "'<='", "'>='", "'<'", 
		"'>'", "'=='", "'!='", "':='", "'\u062F\u0627\u0644\u0629'", "'\u0639\u0645\u0644\u064A\u0629'", 
		"'\u0631\u062C\u0648\u0639'", "'\u0627\u0644\u0646\u0627\u062A\u062C'", 
		null, "'\u0637\u0627\u0644\u0645\u0627'", "'\u0642\u0637\u0639'", null, 
		"'\u0635\u062D\u064A\u062D'", "'\u0637\u0628\u064A\u0639\u064A'", "'\u0635\u062D\u064A\u062D_\u0661'", 
		"'\u0637\u0628\u064A\u0639\u064A_\u0661'", "'\u0635\u062D\u064A\u062D_\u0662'", 
		"'\u0637\u0628\u064A\u0639\u064A_\u0662'", "'\u0635\u062D\u064A\u062D_\u0668'", 
		"'\u0637\u0628\u064A\u0639\u064A_\u0668'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Literal", "LP", "RP", "LSB", "RSB", "LCB", "RCB", "ADDRESS_OF_OPERATOR", 
		"VALUE_INSIDE_OPERATOR", "SIZE_OF", "DOT", "FASLA", "FASLA_MANQUOTA", 
		"COLON", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "ARABIC_MODULS", "MODULUS", 
		"LAND", "LOR", "LOGICAL_NOT", "SL_SYM", "SRA_SYM", "SR_SYM", "BAND_SYM", 
		"BOR_SYM", "BXOR_SYM", "BNOT_SYM", "LTE_SYM", "GTE_SYM", "LT_SYM", "GT_SYM", 
		"EQUAL_SYM", "NOTEQ_SYM", "ASSIGN_SYM", "FUNC_KEYWORD", "OP_KEYWORD", 
		"RET_KEYWORD", "RES_KEYWORD", "IF_KEYWORD", "WHILE_KEYWORD", "BREAK_KEYWORD", 
		"CONTINUE_KEYWORRD", "INT_DATA_TYPE", "UINT_DATA_TYPE", "BYTE_DATA_TYPE", 
		"UBYTE_DATA_TYPE", "SHORT_DATA_TYPE", "USHORT_DATA_TYPE", "LONG_DATA_TYPE", 
		"ULONG_DATA_TYPE", "WHITE_SPACE", "ARABIC_INT_LITERAL", "ENGLISH_INT_LITERAL", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AraC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AraCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AraCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AraCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public GlobalVarDeclContext[] globalVarDecl() {
			return GetRuleContexts<GlobalVarDeclContext>();
		}
		public GlobalVarDeclContext globalVarDecl(int i) {
			return GetRuleContext<GlobalVarDeclContext>(i);
		}
		public FuncDeclContext[] funcDecl() {
			return GetRuleContexts<FuncDeclContext>();
		}
		public FuncDeclContext funcDecl(int i) {
			return GetRuleContext<FuncDeclContext>(i);
		}
		public OpDeclContext[] opDecl() {
			return GetRuleContexts<OpDeclContext>();
		}
		public OpDeclContext opDecl(int i) {
			return GetRuleContext<OpDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 33;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_DATA_TYPE:
				case UINT_DATA_TYPE:
				case BYTE_DATA_TYPE:
				case UBYTE_DATA_TYPE:
				case SHORT_DATA_TYPE:
				case USHORT_DATA_TYPE:
				case LONG_DATA_TYPE:
				case ULONG_DATA_TYPE:
					{
					State = 30; globalVarDecl();
					}
					break;
				case FUNC_KEYWORD:
					{
					State = 31; funcDecl();
					}
					break;
				case OP_KEYWORD:
					{
					State = 32; opDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC_KEYWORD) | (1L << OP_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(AraCParser.ID, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(AraCParser.FASLA_MANQUOTA, 0); }
		public ITerminalNode ASSIGN_SYM() { return GetToken(AraCParser.ASSIGN_SYM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterGlobalVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitGlobalVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclContext globalVarDecl() {
		GlobalVarDeclContext _localctx = new GlobalVarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; dataType();
			State = 38; Match(ID);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN_SYM) {
				{
				State = 39; Match(ASSIGN_SYM);
				State = 40; expression(0);
				}
			}

			State = 43; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		public ITerminalNode FUNC_KEYWORD() { return GetToken(AraCParser.FUNC_KEYWORD, 0); }
		public ITerminalNode ID() { return GetToken(AraCParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(AraCParser.RP, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(AraCParser.LP, 0); }
		public ITerminalNode COLON() { return GetToken(AraCParser.COLON, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode RCB() { return GetToken(AraCParser.RCB, 0); }
		public ITerminalNode LCB() { return GetToken(AraCParser.LCB, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(FUNC_KEYWORD);
			State = 46; Match(ID);
			State = 47; Match(RP);
			State = 48; paramList();
			State = 49; Match(LP);
			State = 50; Match(COLON);
			State = 51; dataType();
			State = 52; Match(RCB);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << RP) | (1L << ADDRESS_OF_OPERATOR) | (1L << VALUE_INSIDE_OPERATOR) | (1L << SIZE_OF) | (1L << PLUS) | (1L << MINUS) | (1L << LOGICAL_NOT) | (1L << BNOT_SYM) | (1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 53; statement();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpDeclContext : ParserRuleContext {
		public ITerminalNode OP_KEYWORD() { return GetToken(AraCParser.OP_KEYWORD, 0); }
		public ITerminalNode ID() { return GetToken(AraCParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(AraCParser.RP, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(AraCParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(AraCParser.RCB, 0); }
		public ITerminalNode LCB() { return GetToken(AraCParser.LCB, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public OpDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterOpDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitOpDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpDeclContext opDecl() {
		OpDeclContext _localctx = new OpDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_opDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(OP_KEYWORD);
			State = 62; Match(ID);
			State = 63; Match(RP);
			State = 64; paramList();
			State = 65; Match(LP);
			State = 66; Match(RCB);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << RP) | (1L << ADDRESS_OF_OPERATOR) | (1L << VALUE_INSIDE_OPERATOR) | (1L << SIZE_OF) | (1L << PLUS) | (1L << MINUS) | (1L << LOGICAL_NOT) | (1L << BNOT_SYM) | (1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 67; statement();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(AraCParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(AraCParser.ID, i);
		}
		public ITerminalNode[] FASLA() { return GetTokens(AraCParser.FASLA); }
		public ITerminalNode FASLA(int i) {
			return GetToken(AraCParser.FASLA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 8, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) {
				{
				State = 75; dataType();
				State = 76; Match(ID);
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 77; Match(FASLA);
					State = 78; dataType();
					State = 79; Match(ID);
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IDExprContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(AraCParser.ID, 0); }
		public IDExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterIDExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitIDExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIDExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddressExprContext : ExpressionContext {
		public ITerminalNode ADDRESS_OF_OPERATOR() { return GetToken(AraCParser.ADDRESS_OF_OPERATOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddressExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterAddressExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitAddressExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExprContext : ExpressionContext {
		public ITerminalNode RP() { return GetToken(AraCParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(AraCParser.LP, 0); }
		public ParenthesisExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterParenthesisExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitParenthesisExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(AraCParser.MULTIPLY, 0); }
		public MultiplyExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterMultiplyExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitMultiplyExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EualityExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL_SYM() { return GetToken(AraCParser.EQUAL_SYM, 0); }
		public ITerminalNode NOTEQ_SYM() { return GetToken(AraCParser.NOTEQ_SYM, 0); }
		public EualityExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterEualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitEualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BxorExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BXOR_SYM() { return GetToken(AraCParser.BXOR_SYM, 0); }
		public BxorExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterBxorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitBxorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBxorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(AraCParser.PLUS, 0); }
		public AddExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GTE_SYM() { return GetToken(AraCParser.GTE_SYM, 0); }
		public ITerminalNode LTE_SYM() { return GetToken(AraCParser.LTE_SYM, 0); }
		public ITerminalNode GT_SYM() { return GetToken(AraCParser.GT_SYM, 0); }
		public ITerminalNode LT_SYM() { return GetToken(AraCParser.LT_SYM, 0); }
		public CompExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterCompExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitCompExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BandExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BAND_SYM() { return GetToken(AraCParser.BAND_SYM, 0); }
		public BandExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterBandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitBandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LandExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LAND() { return GetToken(AraCParser.LAND, 0); }
		public LandExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterLandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitLandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndirectionExprContext : ExpressionContext {
		public ITerminalNode VALUE_INSIDE_OPERATOR() { return GetToken(AraCParser.VALUE_INSIDE_OPERATOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndirectionExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterIndirectionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitIndirectionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirectionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrSubScripExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RSB() { return GetToken(AraCParser.RSB, 0); }
		public ITerminalNode LSB() { return GetToken(AraCParser.LSB, 0); }
		public ArrSubScripExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterArrSubScripExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitArrSubScripExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrSubScripExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LorExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOR() { return GetToken(AraCParser.LOR, 0); }
		public LorExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterLorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitLorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DIVIDE() { return GetToken(AraCParser.DIVIDE, 0); }
		public DivExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterDivExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitDivExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BorExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BOR_SYM() { return GetToken(AraCParser.BOR_SYM, 0); }
		public BorExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterBorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitBorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeExprContext : ExpressionContext {
		public ITerminalNode SIZE_OF() { return GetToken(AraCParser.SIZE_OF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SizeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterSizeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitSizeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExpressionContext {
		public ITerminalNode Literal() { return GetToken(AraCParser.Literal, 0); }
		public LiteralExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryBLExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LOGICAL_NOT() { return GetToken(AraCParser.LOGICAL_NOT, 0); }
		public ITerminalNode BNOT_SYM() { return GetToken(AraCParser.BNOT_SYM, 0); }
		public UnaryBLExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterUnaryBLExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitUnaryBLExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryBLExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(AraCParser.MINUS, 0); }
		public SubtractExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterSubtractExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitSubtractExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastingExprContext : ExpressionContext {
		public ITerminalNode RP() { return GetToken(AraCParser.RP, 0); }
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode LP() { return GetToken(AraCParser.LP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastingExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterCastingExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitCastingExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastingExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryArithmeticExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(AraCParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(AraCParser.MINUS, 0); }
		public UnaryArithmeticExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterUnaryArithmeticExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitUnaryArithmeticExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryArithmeticExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExprContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RP() { return GetToken(AraCParser.RP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode LP() { return GetToken(AraCParser.LP, 0); }
		public FuncCallExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterFuncCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitFuncCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new UnaryArithmeticExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 89;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 90; expression(20);
				}
				break;
			case 2:
				{
				_localctx = new UnaryBLExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91;
				_la = TokenStream.LA(1);
				if ( !(_la==LOGICAL_NOT || _la==BNOT_SYM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 92; expression(19);
				}
				break;
			case 3:
				{
				_localctx = new CastingExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; Match(RP);
				State = 94; dataType();
				State = 95; Match(LP);
				State = 96; expression(18);
				}
				break;
			case 4:
				{
				_localctx = new AddressExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98; Match(ADDRESS_OF_OPERATOR);
				State = 99; expression(17);
				}
				break;
			case 5:
				{
				_localctx = new IndirectionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100; Match(VALUE_INSIDE_OPERATOR);
				State = 101; expression(16);
				}
				break;
			case 6:
				{
				_localctx = new SizeExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; Match(SIZE_OF);
				State = 103; expression(15);
				}
				break;
			case 7:
				{
				_localctx = new ParenthesisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; Match(RP);
				State = 105; expression(0);
				State = 106; Match(LP);
				}
				break;
			case 8:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108; Match(Literal);
				}
				break;
			case 9:
				{
				_localctx = new IDExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 155;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new DivExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 112;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 113; Match(DIVIDE);
						State = 114; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new MultiplyExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 116; Match(MULTIPLY);
						State = 117; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new SubtractExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 119; Match(MINUS);
						State = 120; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new AddExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 122; Match(PLUS);
						State = 123; expression(12);
						}
						break;
					case 5:
						{
						_localctx = new CompExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 125;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTE_SYM) | (1L << GTE_SYM) | (1L << LT_SYM) | (1L << GT_SYM))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 126; expression(11);
						}
						break;
					case 6:
						{
						_localctx = new EualityExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 128;
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL_SYM || _la==NOTEQ_SYM) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 129; expression(10);
						}
						break;
					case 7:
						{
						_localctx = new BandExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						{
						State = 131; Match(BAND_SYM);
						}
						State = 132; expression(9);
						}
						break;
					case 8:
						{
						_localctx = new BxorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 134; Match(BXOR_SYM);
						}
						State = 135; expression(8);
						}
						break;
					case 9:
						{
						_localctx = new BorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						{
						State = 137; Match(BOR_SYM);
						}
						State = 138; expression(7);
						}
						break;
					case 10:
						{
						_localctx = new LandExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 140; Match(LAND);
						}
						State = 141; expression(6);
						}
						break;
					case 11:
						{
						_localctx = new LorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 142;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						{
						State = 143; Match(LOR);
						}
						State = 144; expression(5);
						}
						break;
					case 12:
						{
						_localctx = new FuncCallExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 146; Match(RP);
						State = 147; argumentList();
						State = 148; Match(LP);
						}
						break;
					case 13:
						{
						_localctx = new ArrSubScripExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 150;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 151; Match(RSB);
						State = 152; expression(0);
						State = 153; Match(LSB);
						}
						break;
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] FASLA() { return GetTokens(AraCParser.FASLA); }
		public ITerminalNode FASLA(int i) {
			return GetToken(AraCParser.FASLA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 12, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << RP) | (1L << ADDRESS_OF_OPERATOR) | (1L << VALUE_INSIDE_OPERATOR) | (1L << SIZE_OF) | (1L << PLUS) | (1L << MINUS) | (1L << LOGICAL_NOT) | (1L << BNOT_SYM) | (1L << ID))) != 0)) {
				{
				State = 160; expression(0);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 161; Match(FASLA);
					State = 162; expression(0);
					}
					}
					State = 167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class If_StatContext : StatementContext {
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public If_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterIf_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitIf_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Var_DeclContext : StatementContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public Var_DeclContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterVar_Decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitVar_Decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_Decl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Return_StatContext : StatementContext {
		public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public Return_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterReturn_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitReturn_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_StatContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(AraCParser.FASLA_MANQUOTA, 0); }
		public Expression_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterExpression_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitExpression_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_StatContext : StatementContext {
		public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public While_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterWhile_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitWhile_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Result_StatContext : StatementContext {
		public ResultStatContext resultStat() {
			return GetRuleContext<ResultStatContext>(0);
		}
		public Result_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterResult_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitResult_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assignment_StatContext : StatementContext {
		public AssignmentStatContext assignmentStat() {
			return GetRuleContext<AssignmentStatContext>(0);
		}
		public Assignment_StatContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterAssignment_Stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitAssignment_Stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new Assignment_StatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; assignmentStat();
				}
				break;
			case 2:
				_localctx = new Return_StatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; returnStat();
				}
				break;
			case 3:
				_localctx = new Result_StatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; resultStat();
				}
				break;
			case 4:
				_localctx = new If_StatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173; ifStat();
				}
				break;
			case 5:
				_localctx = new While_StatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 174; whileStat();
				}
				break;
			case 6:
				_localctx = new Var_DeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 175; varDecl();
				}
				break;
			case 7:
				_localctx = new Expression_StatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 176; expression(0);
				State = 177; Match(FASLA_MANQUOTA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(AraCParser.ID, 0); }
		public ITerminalNode ASSIGN_SYM() { return GetToken(AraCParser.ASSIGN_SYM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(AraCParser.FASLA_MANQUOTA, 0); }
		public AssignmentStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterAssignmentStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitAssignmentStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatContext assignmentStat() {
		AssignmentStatContext _localctx = new AssignmentStatContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignmentStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(ID);
			State = 182; Match(ASSIGN_SYM);
			State = 183; expression(0);
			State = 184; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ITerminalNode IF_KEYWORD() { return GetToken(AraCParser.IF_KEYWORD, 0); }
		public ITerminalNode RP() { return GetToken(AraCParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(AraCParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(AraCParser.RCB, 0); }
		public ITerminalNode LCB() { return GetToken(AraCParser.LCB, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(IF_KEYWORD);
			State = 187; Match(RP);
			State = 188; expression(0);
			State = 189; Match(LP);
			State = 190; Match(RCB);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << RP) | (1L << ADDRESS_OF_OPERATOR) | (1L << VALUE_INSIDE_OPERATOR) | (1L << SIZE_OF) | (1L << PLUS) | (1L << MINUS) | (1L << LOGICAL_NOT) | (1L << BNOT_SYM) | (1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 191; statement();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 197; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		public ITerminalNode WHILE_KEYWORD() { return GetToken(AraCParser.WHILE_KEYWORD, 0); }
		public ITerminalNode RP() { return GetToken(AraCParser.RP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(AraCParser.LP, 0); }
		public ITerminalNode RCB() { return GetToken(AraCParser.RCB, 0); }
		public ITerminalNode LCB() { return GetToken(AraCParser.LCB, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterWhileStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitWhileStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 20, RULE_whileStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(WHILE_KEYWORD);
			State = 200; Match(RP);
			State = 201; expression(0);
			State = 202; Match(LP);
			State = 203; Match(RCB);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Literal) | (1L << RP) | (1L << ADDRESS_OF_OPERATOR) | (1L << VALUE_INSIDE_OPERATOR) | (1L << SIZE_OF) | (1L << PLUS) | (1L << MINUS) | (1L << LOGICAL_NOT) | (1L << BNOT_SYM) | (1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 204; statement();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210; Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		public ITerminalNode RET_KEYWORD() { return GetToken(AraCParser.RET_KEYWORD, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(AraCParser.FASLA_MANQUOTA, 0); }
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(RET_KEYWORD);
			State = 213; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultStatContext : ParserRuleContext {
		public ITerminalNode RES_KEYWORD() { return GetToken(AraCParser.RES_KEYWORD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(AraCParser.FASLA_MANQUOTA, 0); }
		public ResultStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterResultStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitResultStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultStatContext resultStat() {
		ResultStatContext _localctx = new ResultStatContext(Context, State);
		EnterRule(_localctx, 24, RULE_resultStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(RES_KEYWORD);
			State = 216; expression(0);
			State = 217; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(AraCParser.ID, 0); }
		public ITerminalNode FASLA_MANQUOTA() { return GetToken(AraCParser.FASLA_MANQUOTA, 0); }
		public ITerminalNode ASSIGN_SYM() { return GetToken(AraCParser.ASSIGN_SYM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; dataType();
			State = 220; Match(ID);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN_SYM) {
				{
				State = 221; Match(ASSIGN_SYM);
				State = 222; expression(0);
				}
			}

			State = 225; Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public ITerminalNode INT_DATA_TYPE() { return GetToken(AraCParser.INT_DATA_TYPE, 0); }
		public ITerminalNode UINT_DATA_TYPE() { return GetToken(AraCParser.UINT_DATA_TYPE, 0); }
		public ITerminalNode BYTE_DATA_TYPE() { return GetToken(AraCParser.BYTE_DATA_TYPE, 0); }
		public ITerminalNode UBYTE_DATA_TYPE() { return GetToken(AraCParser.UBYTE_DATA_TYPE, 0); }
		public ITerminalNode SHORT_DATA_TYPE() { return GetToken(AraCParser.SHORT_DATA_TYPE, 0); }
		public ITerminalNode USHORT_DATA_TYPE() { return GetToken(AraCParser.USHORT_DATA_TYPE, 0); }
		public ITerminalNode LONG_DATA_TYPE() { return GetToken(AraCParser.LONG_DATA_TYPE, 0); }
		public ITerminalNode ULONG_DATA_TYPE() { return GetToken(AraCParser.ULONG_DATA_TYPE, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAraCListener typedListener = listener as IAraCListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 22);
		case 12: return Precpred(Context, 21);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\xE8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '$', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '%', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ',', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x39', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '<', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'G', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', 'J', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', 'T', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'W', '\v', '\x6', '\x5', '\x6', 'Y', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'q', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x9E', '\n', '\a', '\f', '\a', '\xE', '\a', '\xA1', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xA6', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\xA9', '\v', '\b', '\x5', '\b', '\xAB', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xB6', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\xC3', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\xC6', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\xD0', '\n', '\f', '\f', '\f', '\xE', '\f', '\xD3', '\v', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xE2', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x2', 
		'\x3', '\f', '\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', '\a', '\x3', 
		'\x2', '\x11', '\x12', '\x4', '\x2', '\x19', '\x19', ' ', ' ', '\x3', 
		'\x2', '!', '$', '\x3', '\x2', '%', '&', '\x3', '\x2', '\x30', '\x37', 
		'\x2', '\x100', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '/', '\x3', '\x2', '\x2', '\x2', '\b', '?', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'X', '\x3', '\x2', '\x2', '\x2', '\f', 
		'p', '\x3', '\x2', '\x2', '\x2', '\xE', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x12', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xBC', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xE5', '\x3', '\x2', '\x2', '\x2', ' ', '$', '\x5', 
		'\x4', '\x3', '\x2', '!', '$', '\x5', '\x6', '\x4', '\x2', '\"', '$', 
		'\x5', '\b', '\x5', '\x2', '#', ' ', '\x3', '\x2', '\x2', '\x2', '#', 
		'!', '\x3', '\x2', '\x2', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x5', '\x1E', '\x10', '\x2', '(', '+', '\a', ';', '\x2', 
		'\x2', ')', '*', '\a', '\'', '\x2', '\x2', '*', ',', '\x5', '\f', '\a', 
		'\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\xF', '\x2', 
		'\x2', '.', '\x5', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '(', 
		'\x2', '\x2', '\x30', '\x31', '\a', ';', '\x2', '\x2', '\x31', '\x32', 
		'\a', '\x5', '\x2', '\x2', '\x32', '\x33', '\x5', '\n', '\x6', '\x2', 
		'\x33', '\x34', '\a', '\x4', '\x2', '\x2', '\x34', '\x35', '\a', '\x10', 
		'\x2', '\x2', '\x35', '\x36', '\x5', '\x1E', '\x10', '\x2', '\x36', ':', 
		'\a', '\t', '\x2', '\x2', '\x37', '\x39', '\x5', '\x10', '\t', '\x2', 
		'\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '<', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', 
		'\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\a', '\b', '\x2', '\x2', '>', '\a', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', ')', '\x2', '\x2', '@', '\x41', '\a', 
		';', '\x2', '\x2', '\x41', '\x42', '\a', '\x5', '\x2', '\x2', '\x42', 
		'\x43', '\x5', '\n', '\x6', '\x2', '\x43', '\x44', '\a', '\x4', '\x2', 
		'\x2', '\x44', 'H', '\a', '\t', '\x2', '\x2', '\x45', 'G', '\x5', '\x10', 
		'\t', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 'J', 
		'H', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\b', '\x2', '\x2', 'L', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x5', '\x1E', '\x10', '\x2', 
		'N', 'U', '\a', ';', '\x2', '\x2', 'O', 'P', '\a', '\xE', '\x2', '\x2', 
		'P', 'Q', '\x5', '\x1E', '\x10', '\x2', 'Q', 'R', '\a', ';', '\x2', '\x2', 
		'R', 'T', '\x3', '\x2', '\x2', '\x2', 'S', 'O', '\x3', '\x2', '\x2', '\x2', 
		'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'M', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\b', '\a', '\x1', '\x2', '[', '\\', '\t', '\x2', '\x2', 
		'\x2', '\\', 'q', '\x5', '\f', '\a', '\x16', ']', '^', '\t', '\x3', '\x2', 
		'\x2', '^', 'q', '\x5', '\f', '\a', '\x15', '_', '`', '\a', '\x5', '\x2', 
		'\x2', '`', '\x61', '\x5', '\x1E', '\x10', '\x2', '\x61', '\x62', '\a', 
		'\x4', '\x2', '\x2', '\x62', '\x63', '\x5', '\f', '\a', '\x14', '\x63', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\n', '\x2', '\x2', 
		'\x65', 'q', '\x5', '\f', '\a', '\x13', '\x66', 'g', '\a', '\v', '\x2', 
		'\x2', 'g', 'q', '\x5', '\f', '\a', '\x12', 'h', 'i', '\a', '\f', '\x2', 
		'\x2', 'i', 'q', '\x5', '\f', '\a', '\x11', 'j', 'k', '\a', '\x5', '\x2', 
		'\x2', 'k', 'l', '\x5', '\f', '\a', '\x2', 'l', 'm', '\a', '\x4', '\x2', 
		'\x2', 'm', 'q', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\a', '\x3', '\x2', 
		'\x2', 'o', 'q', '\a', ';', '\x2', '\x2', 'p', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'p', ']', '\x3', '\x2', '\x2', '\x2', 'p', '_', '\x3', '\x2', '\x2', 
		'\x2', 'p', '\x64', '\x3', '\x2', '\x2', '\x2', 'p', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'h', '\x3', '\x2', '\x2', '\x2', 'p', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'q', '\x9F', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\f', 
		'\x10', '\x2', '\x2', 's', 't', '\a', '\x14', '\x2', '\x2', 't', '\x9E', 
		'\x5', '\f', '\a', '\x11', 'u', 'v', '\f', '\xF', '\x2', '\x2', 'v', 'w', 
		'\a', '\x13', '\x2', '\x2', 'w', '\x9E', '\x5', '\f', '\a', '\x10', 'x', 
		'y', '\f', '\xE', '\x2', '\x2', 'y', 'z', '\a', '\x12', '\x2', '\x2', 
		'z', '\x9E', '\x5', '\f', '\a', '\xF', '{', '|', '\f', '\r', '\x2', '\x2', 
		'|', '}', '\a', '\x11', '\x2', '\x2', '}', '\x9E', '\x5', '\f', '\a', 
		'\xE', '~', '\x7F', '\f', '\f', '\x2', '\x2', '\x7F', '\x80', '\t', '\x4', 
		'\x2', '\x2', '\x80', '\x9E', '\x5', '\f', '\a', '\r', '\x81', '\x82', 
		'\f', '\v', '\x2', '\x2', '\x82', '\x83', '\t', '\x5', '\x2', '\x2', '\x83', 
		'\x9E', '\x5', '\f', '\a', '\f', '\x84', '\x85', '\f', '\n', '\x2', '\x2', 
		'\x85', '\x86', '\a', '\x1D', '\x2', '\x2', '\x86', '\x9E', '\x5', '\f', 
		'\a', '\v', '\x87', '\x88', '\f', '\t', '\x2', '\x2', '\x88', '\x89', 
		'\a', '\x1F', '\x2', '\x2', '\x89', '\x9E', '\x5', '\f', '\a', '\n', '\x8A', 
		'\x8B', '\f', '\b', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x1E', '\x2', 
		'\x2', '\x8C', '\x9E', '\x5', '\f', '\a', '\t', '\x8D', '\x8E', '\f', 
		'\a', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x17', '\x2', '\x2', '\x8F', 
		'\x9E', '\x5', '\f', '\a', '\b', '\x90', '\x91', '\f', '\x6', '\x2', '\x2', 
		'\x91', '\x92', '\a', '\x18', '\x2', '\x2', '\x92', '\x9E', '\x5', '\f', 
		'\a', '\a', '\x93', '\x94', '\f', '\x18', '\x2', '\x2', '\x94', '\x95', 
		'\a', '\x5', '\x2', '\x2', '\x95', '\x96', '\x5', '\xE', '\b', '\x2', 
		'\x96', '\x97', '\a', '\x4', '\x2', '\x2', '\x97', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\f', '\x17', '\x2', '\x2', '\x99', '\x9A', 
		'\a', '\a', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\f', '\a', '\x2', '\x9B', 
		'\x9C', '\a', '\x6', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', 'r', '\x3', '\x2', '\x2', '\x2', '\x9D', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', 'x', '\x3', '\x2', '\x2', '\x2', '\x9D', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '~', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x87', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA7', '\x5', 
		'\f', '\a', '\x2', '\xA3', '\xA4', '\a', '\xE', '\x2', '\x2', '\xA4', 
		'\xA6', '\x5', '\f', '\a', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xF', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xB6', '\x5', '\x12', '\n', '\x2', '\xAD', '\xB6', '\x5', '\x18', '\r', 
		'\x2', '\xAE', '\xB6', '\x5', '\x1A', '\xE', '\x2', '\xAF', '\xB6', '\x5', 
		'\x14', '\v', '\x2', '\xB0', '\xB6', '\x5', '\x16', '\f', '\x2', '\xB1', 
		'\xB6', '\x5', '\x1C', '\xF', '\x2', '\xB2', '\xB3', '\x5', '\f', '\a', 
		'\x2', '\xB3', '\xB4', '\a', '\xF', '\x2', '\x2', '\xB4', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\a', ';', '\x2', '\x2', '\xB8', '\xB9', '\a', 
		'\'', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\f', '\a', '\x2', '\xBA', 
		'\xBB', '\a', '\xF', '\x2', '\x2', '\xBB', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', ',', '\x2', '\x2', '\xBD', '\xBE', '\a', 
		'\x5', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\f', '\a', '\x2', '\xBF', 
		'\xC0', '\a', '\x4', '\x2', '\x2', '\xC0', '\xC4', '\a', '\t', '\x2', 
		'\x2', '\xC1', '\xC3', '\x5', '\x10', '\t', '\x2', '\xC2', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\b', '\x2', '\x2', '\xC8', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '-', '\x2', 
		'\x2', '\xCA', '\xCB', '\a', '\x5', '\x2', '\x2', '\xCB', '\xCC', '\x5', 
		'\f', '\a', '\x2', '\xCC', '\xCD', '\a', '\x4', '\x2', '\x2', '\xCD', 
		'\xD1', '\a', '\t', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\x10', '\t', 
		'\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'\b', '\x2', '\x2', '\xD5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '*', '\x2', '\x2', '\xD7', '\xD8', '\a', '\xF', '\x2', '\x2', 
		'\xD8', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '+', 
		'\x2', '\x2', '\xDA', '\xDB', '\x5', '\f', '\a', '\x2', '\xDB', '\xDC', 
		'\a', '\xF', '\x2', '\x2', '\xDC', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDE', '\x5', '\x1E', '\x10', '\x2', '\xDE', '\xE1', '\a', ';', 
		'\x2', '\x2', '\xDF', '\xE0', '\a', '\'', '\x2', '\x2', '\xE0', '\xE2', 
		'\x5', '\f', '\a', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE4', '\a', '\xF', '\x2', '\x2', '\xE4', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\t', '\x6', '\x2', '\x2', 
		'\xE6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x12', '#', '%', '+', ':', 
		'H', 'U', 'X', 'p', '\x9D', '\x9F', '\xA7', '\xAA', '\xB5', '\xC4', '\xD1', 
		'\xE1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Parser
