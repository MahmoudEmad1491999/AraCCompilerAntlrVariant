//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mahmoud/Projects/AntlrExamples/AraC.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrOutput {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AraCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, IDENTIFIER=2, ARABIC_INT_LITERAL=3, ENGLISH_INT_LITERAL=4, LEFT_BOW=5, 
		RIGHT_BOW=6, LEFT_SQUARE=7, RIGHT_SQUARE=8, LEFT_CURLY=9, RIGHT_CURLY=10, 
		PLUS=11, MINUS=12, MULTIPLY=13, DIVIDE=14, ARABIC_MODULS=15, SHIFT_LEFT=16, 
		SHIFT_RIGHT_ARITHMETIC=17, SHIFT_RIGHT=18, LESS_THAN_EQUAL=19, GREATER_THAN_EQUAL=20, 
		LEFT_ANGLE=21, RIGHT_ANGLE=22, EQUAL=23, NOT_EQUAL=24, ASSIGN=25, DOT=26, 
		FASLA=27, FASLA_MANQUOTA=28, FUNCTION=29, OPERATION=30, RETURN_KEYWORD=31, 
		RESULT_KEYWORD=32, IF_KEYWORD=33, WHILE_KEYWORD=34, INT_DATA_TYPE=35, 
		UINT_DATA_TYPE=36, BYTE_KEYWORD=37, UBYTE_KEYWORD=38, SHORT_KEYWORD=39, 
		USHORT_KEYWORD=40, LONG_KEYWORD=41, ULONG_KEYWORD=42;
	public const int
		RULE_program = 0;
	public static readonly string[] ruleNames = {
		"program"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Hello'", null, null, null, "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'+'", "'-'", "'\u00D7'", "'\u00F7'", "'\u066A'", "'<<'", "'>>>'", 
		"'>>'", "'<='", "'>='", "'<'", "'>'", "'=='", "'!='", "'='", "'.'", "'\u060C'", 
		"'\u061B'", "'\u062F\u0627\u0644\u0629'", "'\u0639\u0645\u0644\u064A\u0629'", 
		"'\u0631\u062C\u0648\u0639'", "'\u0627\u0644\u0646\u0627\u062A\u062C'", 
		"'IF'", "'WHILE'", "'\u0635\u062D\u064A\u062D'", "'\u0637\u0628\u064A\u0639\u064A'", 
		"'\u0635\u062D\u064A\u062D_\u0661'", "'\u0637\u0628\u064A\u0639\u064A_\u0661'", 
		"'\u0635\u062D\u064A\u062D_\u0662'", "'\u0637\u0628\u064A\u0639\u064A_\u0662'", 
		"'\u0635\u062D\u064A\u062D_\u0668'", "'\u0637\u0628\u064A\u0639\u064A_\u0668'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "IDENTIFIER", "ARABIC_INT_LITERAL", "ENGLISH_INT_LITERAL", 
		"LEFT_BOW", "RIGHT_BOW", "LEFT_SQUARE", "RIGHT_SQUARE", "LEFT_CURLY", 
		"RIGHT_CURLY", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "ARABIC_MODULS", 
		"SHIFT_LEFT", "SHIFT_RIGHT_ARITHMETIC", "SHIFT_RIGHT", "LESS_THAN_EQUAL", 
		"GREATER_THAN_EQUAL", "LEFT_ANGLE", "RIGHT_ANGLE", "EQUAL", "NOT_EQUAL", 
		"ASSIGN", "DOT", "FASLA", "FASLA_MANQUOTA", "FUNCTION", "OPERATION", "RETURN_KEYWORD", 
		"RESULT_KEYWORD", "IF_KEYWORD", "WHILE_KEYWORD", "INT_DATA_TYPE", "UINT_DATA_TYPE", 
		"BYTE_KEYWORD", "UBYTE_KEYWORD", "SHORT_KEYWORD", "USHORT_KEYWORD", "LONG_KEYWORD", 
		"ULONG_KEYWORD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AraC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AraCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AraCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AraCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AraCParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAraCVisitor<TResult> typedVisitor = visitor as IAraCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2; Match(T__0);
			State = 3; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\b', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x2', '\x2', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x6', '\x2', '\x4', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x5', '\a', '\x3', '\x2', '\x2', '\x5', '\x6', '\a', '\x2', '\x2', '\x3', 
		'\x6', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrOutput
